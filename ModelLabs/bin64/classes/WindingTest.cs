//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// Physical winding test data for the winding/tap pairs of a transformer (or phase shifter). This test data can be used to derive other attributes of specific transformer or phase shifter models.
    public class WindingTest : IdentifiedObject {
        
        /// The winding from which the test was conducted
        private TransformerWinding cim_From_TransformerWinding;
        
        private const bool isFrom_TransformerWindingMandatory = true;
        
        private const string _From_TransformerWindingPrefix = "cim";
        
        /// The leakage impedance measured at the "from" winding  with the "to" winding short-circuited and all other windings open-circuited.  Leakage impedance is expressed in units based on the apparent power and voltage ratings of the "from" winding.
        private System.Single? cim_leakageImpedance;
        
        private const bool isLeakageImpedanceMandatory = true;
        
        private const string _leakageImpedancePrefix = "cim";
        
        /// Zero-sequence leakage impedance [%]. When unavailable, use same value as for the direct-sequence impedance.
        private System.Single? cim_leakageImpedance0Percent;
        
        private const bool isLeakageImpedance0PercentMandatory = true;
        
        private const string _leakageImpedance0PercentPrefix = "ftn";
        
        /// The leakage impedance measured at the highest position of the tap changer
        private System.Single? cim_leakageImpedanceMaxPercent;
        
        private const bool isLeakageImpedanceMaxPercentMandatory = false;
        
        private const string _leakageImpedanceMaxPercentPrefix = "ftn";
        
        /// The leakage impedance measured at the lowest position of the tap changer
        private System.Single? cim_leakageImpedanceMinPercent;
        
        private const bool isLeakageImpedanceMinPercentMandatory = false;
        
        private const string _leakageImpedanceMinPercentPrefix = "ftn";
        
        /// The load loss kW ("to" winding short-circuited) from the test report.
        private System.Single? cim_loadLoss;
        
        private const bool isLoadLossMandatory = true;
        
        private const string _loadLossPrefix = "cim";
        
        /// The no load loss kW "to" winding open-circuited) from the test report.
        private System.Single? cim_noLoadLoss;
        
        private const bool isNoLoadLossMandatory = true;
        
        private const string _noLoadLossPrefix = "cim";
        
        /// The phase shift measured at the open-circuited "to" winding, with the "from" winding set to the "from" winding's rated voltage and all other windings open-circuited.
        private System.Single? cim_phaseShift;
        
        private const bool isPhaseShiftMandatory = true;
        
        private const string _phaseShiftPrefix = "cim";
        
        public virtual TransformerWinding From_TransformerWinding {
            get {
                return this.cim_From_TransformerWinding;
            }
            set {
                this.cim_From_TransformerWinding = value;
            }
        }
        
        public virtual bool From_TransformerWindingHasValue {
            get {
                return this.cim_From_TransformerWinding != null;
            }
        }
        
        public static bool IsFrom_TransformerWindingMandatory {
            get {
                return isFrom_TransformerWindingMandatory;
            }
        }
        
        public static string From_TransformerWindingPrefix {
            get {
                return _From_TransformerWindingPrefix;
            }
        }
        
        public virtual float LeakageImpedance {
            get {
                return this.cim_leakageImpedance.GetValueOrDefault();
            }
            set {
                this.cim_leakageImpedance = value;
            }
        }
        
        public virtual bool LeakageImpedanceHasValue {
            get {
                return this.cim_leakageImpedance != null;
            }
        }
        
        public static bool IsLeakageImpedanceMandatory {
            get {
                return isLeakageImpedanceMandatory;
            }
        }
        
        public static string LeakageImpedancePrefix {
            get {
                return _leakageImpedancePrefix;
            }
        }
        
        public virtual float LeakageImpedance0Percent {
            get {
                return this.cim_leakageImpedance0Percent.GetValueOrDefault();
            }
            set {
                this.cim_leakageImpedance0Percent = value;
            }
        }
        
        public virtual bool LeakageImpedance0PercentHasValue {
            get {
                return this.cim_leakageImpedance0Percent != null;
            }
        }
        
        public static bool IsLeakageImpedance0PercentMandatory {
            get {
                return isLeakageImpedance0PercentMandatory;
            }
        }
        
        public static string LeakageImpedance0PercentPrefix {
            get {
                return _leakageImpedance0PercentPrefix;
            }
        }
        
        public virtual float LeakageImpedanceMaxPercent {
            get {
                return this.cim_leakageImpedanceMaxPercent.GetValueOrDefault();
            }
            set {
                this.cim_leakageImpedanceMaxPercent = value;
            }
        }
        
        public virtual bool LeakageImpedanceMaxPercentHasValue {
            get {
                return this.cim_leakageImpedanceMaxPercent != null;
            }
        }
        
        public static bool IsLeakageImpedanceMaxPercentMandatory {
            get {
                return isLeakageImpedanceMaxPercentMandatory;
            }
        }
        
        public static string LeakageImpedanceMaxPercentPrefix {
            get {
                return _leakageImpedanceMaxPercentPrefix;
            }
        }
        
        public virtual float LeakageImpedanceMinPercent {
            get {
                return this.cim_leakageImpedanceMinPercent.GetValueOrDefault();
            }
            set {
                this.cim_leakageImpedanceMinPercent = value;
            }
        }
        
        public virtual bool LeakageImpedanceMinPercentHasValue {
            get {
                return this.cim_leakageImpedanceMinPercent != null;
            }
        }
        
        public static bool IsLeakageImpedanceMinPercentMandatory {
            get {
                return isLeakageImpedanceMinPercentMandatory;
            }
        }
        
        public static string LeakageImpedanceMinPercentPrefix {
            get {
                return _leakageImpedanceMinPercentPrefix;
            }
        }
        
        public virtual float LoadLoss {
            get {
                return this.cim_loadLoss.GetValueOrDefault();
            }
            set {
                this.cim_loadLoss = value;
            }
        }
        
        public virtual bool LoadLossHasValue {
            get {
                return this.cim_loadLoss != null;
            }
        }
        
        public static bool IsLoadLossMandatory {
            get {
                return isLoadLossMandatory;
            }
        }
        
        public static string LoadLossPrefix {
            get {
                return _loadLossPrefix;
            }
        }
        
        public virtual float NoLoadLoss {
            get {
                return this.cim_noLoadLoss.GetValueOrDefault();
            }
            set {
                this.cim_noLoadLoss = value;
            }
        }
        
        public virtual bool NoLoadLossHasValue {
            get {
                return this.cim_noLoadLoss != null;
            }
        }
        
        public static bool IsNoLoadLossMandatory {
            get {
                return isNoLoadLossMandatory;
            }
        }
        
        public static string NoLoadLossPrefix {
            get {
                return _noLoadLossPrefix;
            }
        }
        
        public virtual float PhaseShift {
            get {
                return this.cim_phaseShift.GetValueOrDefault();
            }
            set {
                this.cim_phaseShift = value;
            }
        }
        
        public virtual bool PhaseShiftHasValue {
            get {
                return this.cim_phaseShift != null;
            }
        }
        
        public static bool IsPhaseShiftMandatory {
            get {
                return isPhaseShiftMandatory;
            }
        }
        
        public static string PhaseShiftPrefix {
            get {
                return _phaseShiftPrefix;
            }
        }
    }
}
